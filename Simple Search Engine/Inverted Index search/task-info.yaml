type: edu
custom_name: stage5
files:
- name: src/search/Main.kt
  visible: true
  text: |
    package search

    import java.io.File
    import kotlin.system.exitProcess

    /*
    First, the user should input a number N, which is the number of data lines they are going to enter next.
    Then the user enters N lines with data. After that, the user enters a number M, which is the number of search queries.
    After each query, the program should print the information it managed to find among the data.
    You can see this searching process in the example below.

    In this stage, you need to create a menu. The menu should display the following options:
    1. Search information.
    2. Print all data.
    0. Exit.

    The user must select a menu item and then enter data if necessary. Your program must not stop until the corresponding option (exit) is chosen.

    Decompose the program into separate methods to make it easy to understand and to further develop or edit.

    The program must process the command line argument --data followed by the name of the file with the data, for example, --data text.txt.

     */
    fun main(args: Array<String>) {
        checkArgs(args)
        val file = checkFile(args[1])
        val data = readData(file)

        do {
            val menu = readMenuOption()
            when (menu) {
                0 -> exit()
                1 -> findPerson(data)
                2 -> printAll(data)
            }
        } while (menu != 0)

    }

    /**
     * read Data from a File
     * @param file
     * @return List<String>
     */
    private fun readData(file: File) = file.readLines()

    /**
     * Check data file exists
     * @param fileArg file name
     * @return File
     */
    private fun checkFile(fileArg: String): File {
        val fileName = "src/$fileArg"
        val file = File(fileName)
        if (!file.exists()) {
            println("File $fileName does not exist")
            exitProcess(1)
        }
        return file
    }

    /**
     * Check if the command line arguments are valid
     */
    private fun checkArgs(args: Array<String>) {
        if (args.size != 2) {
            println("Usage: --data <file.text>")
            exitProcess(1)
        }
    }

    /**
     * Print all data
     * @param data List of data
     */
    fun printAll(data: List<String>) {
        println("=== List of people ===")
        data.forEach { println(it) }
    }

    /**
     * Find person
     * @param data List of data
     */
    fun findPerson(data: List<String>) {
        val query = readQuery()
        val result = search(data, query)
        println(result)
    }

    /**
     * Exits the program.
     */
    fun exit() {
        println("Bye!")
        exitProcess(0)
    }

    /**
     * Reads Menu
     * @return Menu option
     */
    fun readMenuOption(): Int {
        var option: Int
        do {
            println("=== Menu ===")
            println("1. Find a person")
            println("2. Print all people")
            println("0. Exit")
            option = readLine()!!.toIntOrNull()?: -1
            if (option !in 0..2) {
                println("Incorrect option! Try again.")
            }
        } while (option !in 0..2)
        return option
    }

    /**
     *  Search for a query in a data
     *  @param data The data to search in
     *  @param query The query to search for
     *  @return The result of the search
     */
    fun search(data: List<String>, query: String): String {
        val found = data.filter { it.lowercase().contains(query.lowercase()) }
        return if (found.isEmpty()) "No matching people found." else "People found:\n${found.joinToString("\n")}"
    }

    /**
     * Read de query
     * @return The query
     */
    fun readQuery(): String {
        println("Enter a name or email to search all suitable people. ")
        return readLine()!!
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String test1 =
            "2\n" +
            "0";

        public static final String test2 =
            "1\n" +
            "qwerty\n" +
            "0";

        public static final String test3 =
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test4 =
            "3\n" +
            "1\n" +
            "Bob\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test5 =
            "1\n" +
            "@\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test6 =
            "0";

        public static final String test7 =
            "1\n" +
            "this text never find some match\n" +
            "0";

        public static final String test8 =
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        public static final String test9 =
            "4\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "this text never gonna be matched\n" +
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6, test7, test8, test9}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(input))
                    .setInput(input)
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] currentSearchResult;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine].trim().toLowerCase();

                        currentInputLine++;

                        List<String> intendedResult = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            if (s.contains(" " + toSearch + " ")
                                || s.startsWith(toSearch + " ")
                                || s.endsWith(" " + toSearch)) {

                                intendedResult.add(s);
                            }
                        }



                        currentSearchResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(new String[0]);

                        Arrays.sort(correctOutput);
                        Arrays.sort(currentSearchResult);

                        if (!Arrays.equals(correctOutput, currentSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(new String[0]);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES =
            "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: src/names.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7821#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 01 Jan 2022 12:45:06 UTC
record: 5
